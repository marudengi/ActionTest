name: Push Docker image to ECR and update to Github

on:
  release:
    types: [published]
  push:
    branches: [ "main" ]

jobs:
  push_to_registry_frontend:  
    name: Push Frontend Docker image to ECR
    runs-on: ubuntu-18.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Set Outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
        
      - name: Configure AWS creddentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY }}
          
      - name: Build and push
        uses: docker/build-push-action@v2 # build-push-action 사용
        with:
          context: ./Frontend
          push: true
          tags: |
            ${{ secrets.REGISTRY }}/react-app:${{ steps.extract_branch.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
            ${{ secrets.REGISTRY }}/react-app:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max
          
  push_to_registry_backend_hello:  
    name: Push Backend Hello Docker image to ECR
    runs-on: ubuntu-18.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set Outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Configure AWS creddentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY }}
          
      - name: Build and push
        uses: docker/build-push-action@v2 # build-push-action 사용
        with:
          context: ./Backend/hello-api
          push: true
          tags: |
            ${{ secrets.REGISTRY }}/hello-app:${{ steps.extract_branch.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
            ${{ secrets.REGISTRY }}/hello-app:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max

  push_to_registry_backend_hi:  
    name: Push Backend hi Docker image to ECR
    runs-on: ubuntu-18.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set Outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Configure AWS creddentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY }}
          
      - name: Build and push
        uses: docker/build-push-action@v2 # build-push-action 사용
        with:
          context: ./Backend/hi-api
          push: true
          tags: |
            ${{ secrets.REGISTRY }}/hi-app:${{ steps.extract_branch.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
            ${{ secrets.REGISTRY }}/hi-app:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max


  push_to_registry_backend_goodmorning:  
    name: Push Backend goodmorning Docker image to ECR
    runs-on: ubuntu-18.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set Outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Configure AWS creddentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY }}
          
      - name: Build and push
        uses: docker/build-push-action@v2 # build-push-action 사용
        with:
          context: ./Backend/hello-api
          push: true
          tags: |
            ${{ secrets.REGISTRY }}/goodmorning-app:${{ steps.extract_branch.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
            ${{ secrets.REGISTRY }}/goodmorning-app:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max

  push_to_registry_backend_goodnight:  
    name: Push Backend goodnight Docker image to ECR
    runs-on: ubuntu-18.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set Outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Configure AWS creddentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY }}
          
      - name: Build and push
        uses: docker/build-push-action@v2 # build-push-action 사용
        with:
          context: ./Backend/hello-api
          push: true
          tags: |
            ${{ secrets.REGISTRY }}/goodnight-app:${{ steps.extract_branch.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
            ${{ secrets.REGISTRY }}/goodnight-app:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max

  deploy:  
    name: Edit deploy.yaml and deploy
    needs: ["push_to_registry_frontend","push_to_registry_backend_hello","push_to_registry_backend_hi","push_to_registry_backend_goodmorning","push_to_registry_backend_goodnight"]
    runs-on: ubuntu-18.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        
      - name: Update Version fe
        run: |
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            version=$(cat ./Frontend/charts/helm-example/values.yaml | grep version: | awk '{print $2}')
            sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./Frontend/charts/helm-example/values.yaml
        
      - name: Update Version hello
        run: |
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            version=$(cat ./Backend/hello-api/charts/helm-example/values.yaml | grep version: | awk '{print $2}')
            sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./Backend/hello-api/charts/helm-example/values.yaml
        
      - name: Update Version hi
        run: |
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            version=$(cat ./Backend/hi-api/charts/helm-example/values.yaml | grep version: | awk '{print $2}')
            sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./Backend/hi-api/charts/helm-example/values.yaml
        
      - name: Update Version goodmorning
        run: |
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            version=$(cat ./Backend/goodmorning-api/charts/helm-example/values.yaml | grep version: | awk '{print $2}')
            sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./Backend/goodmorning-api/charts/helm-example/values.yaml
        
      - name: Update Version goodnight
        run: |
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            version=$(cat ./Backend/goodnight-api/charts/helm-example/values.yaml | grep version: | awk '{print $2}')
            sed -i "s/$version/${GITHUB_REF##*/}-$git_hash/" ./Backend/goodnight-api/charts/helm-example/values.yaml

      - name: Commit and push changes
        uses: devops-infra/action-commit-push@v0.3
        with:
          github_token: ${{ secrets.GIT_ACCESS_TOKEN }}
          commit_message: Version updated

#       - name: ArgoCD Application Sync Action
#         # You may pin to the exact commit or the version.
#         # uses: omegion/argocd-actions@acb1ed549f9d5139c2d2c13f1b9dde6dd70856b5
#         uses: omegion/argocd-actions@v0.2.0
#         with:
#           # ArgoCD server address
#           address: ${{ secrets.ARGOCD_APP_ADDRESS }}
#           # ArgoCD token
#           token: ${{ secrets.ARGOCD_APP_TOKEN }}
#           # Application name to sync
#           appName: |
#             test-backend-goodmorning-app
#             test-backend-goodnight-app
#             test-backend-hi-app
#             test-backend-hello-app
            
